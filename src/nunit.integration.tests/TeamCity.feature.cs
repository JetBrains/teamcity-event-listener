// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace nunit.integration.tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("NUnit should support TeamCity")]
    public partial class NUnitShouldSupportTeamCityFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TeamCity.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NUnit should support TeamCity", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("NUnit path is ..\\nunit\\", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run successful test for NUnit3")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunSuccessfulTestForNUnit3(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run successful test for NUnit3", @__tags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 9
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 19
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table1.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output",
                        "tc:parseServiceMessagesInside"});
            table1.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 20
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table1, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run test with Assert.Pass")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunTestWithAssert_Pass(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run test with Assert.Pass", @__tags);
#line 38
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 39
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
 testRunner.And("I have added Pass method as PassTest to the class Foo.Tests.UnitTests1 for foo.te" +
                    "sts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 49
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table2.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.PassTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.PassTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 50
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run test with Assert.Pass with tex" +
            "t")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunTestWithAssert_PassWithText(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run test with Assert.Pass with tex" +
                    "t", @__tags);
#line 68
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 69
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 70
 testRunner.And("I have added PassWithText method as PassTest to the class Foo.Tests.UnitTests1 fo" +
                    "r foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 78
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 79
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table3.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.PassTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.PassTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "Assert.Pass message: some text",
                        "tc:parseServiceMessagesInside"});
            table3.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.PassTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 80
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run test with Assert.Pass for NUni" +
            "t2")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunTestWithAssert_PassForNUnit2(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run test with Assert.Pass for NUni" +
                    "t2", @__tags);
#line 98
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 99
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 100
 testRunner.And("I have added Pass method as PassTest to the class Foo.Tests.UnitTests1 for foo.te" +
                    "sts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.And("I have copied the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to" +
                    " folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
 testRunner.And("I have added the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to " +
                    "foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 109
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table4.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table4.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.PassTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table4.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.PassTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table4.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 110
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run test with Assert.Pass with tex" +
            "t for NUnit2")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunTestWithAssert_PassWithTextForNUnit2(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run test with Assert.Pass with tex" +
                    "t for NUnit2", @__tags);
#line 122
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 123
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 124
 testRunner.And("I have added PassWithText method as PassTest to the class Foo.Tests.UnitTests1 fo" +
                    "r foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
 testRunner.And("I have copied the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to" +
                    " folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 127
 testRunner.And("I have added the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to " +
                    "foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 128
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 129
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 132
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 133
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table5.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table5.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.PassTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table5.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.PassTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "Assert.Pass message: some text",
                        "tc:parseServiceMessagesInside"});
            table5.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.PassTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table5.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 134
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run it for different types of test" +
            "s")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("ProjectFile", "Version45", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("ProjectFile", "Version40", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CmdArguments", "Version45", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CmdArguments", "Version40", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("ProjectFile", "Version45", "EnvVariable", new string[0])]
        [NUnit.Framework.TestCaseAttribute("ProjectFile", "Version40", "EnvVariable", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CmdArguments", "Version45", "EnvVariable", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CmdArguments", "Version40", "EnvVariable", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunItForDifferentTypesOfTests(string configurationType, string frameworkVersion, string teamCityIntegration, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run it for different types of test" +
                    "s", @__tags);
#line 147
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 148
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 149
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.And("I have added failed method as FailedTest to the class Foo.Tests.UnitTests2 for fo" +
                    "o.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
 testRunner.And("I have added ignored method as IgnoredTest to the class Foo.Tests.UnitTests3 for " +
                    "foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
 testRunner.And("I have added inconclusive method as InconclusiveTest to the class Foo.Tests.UnitT" +
                    "ests4 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 153
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 155
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 156
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 157
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
 testRunner.And(string.Format("I want to use {0} type of TeamCity integration", teamCityIntegration), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 159
 testRunner.And(string.Format("I want to use {0} configuration type", configurationType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 160
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 161
 testRunner.Then("the exit code should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 162
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table6.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output",
                        "tc:parseServiceMessagesInside"});
            table6.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests2.FailedTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testFailed",
                        "Foo.Tests.UnitTests2.FailedTest",
                        "",
                        "",
                        ".+",
                        "",
                        "Reason",
                        "Foo.Tests.UnitTests2.FailedTest()",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests2.FailedTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests3.IgnoredTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testIgnored",
                        "Foo.Tests.UnitTests3.IgnoredTest",
                        "",
                        "",
                        ".+",
                        "",
                        "Reason",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests4.InconclusiveTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testIgnored",
                        "Foo.Tests.UnitTests4.InconclusiveTest",
                        "",
                        "",
                        ".+",
                        "",
                        "Inconclusive",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 163
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table6, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run it for failed setup")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunItForFailedSetup(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run it for failed setup", @__tags);
#line 200
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 201
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 202
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 203
 testRunner.And("I have added failedSetUp method as FailedSetUp to the class Foo.Tests.UnitTests1 " +
                    "for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 204
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 205
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 206
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 207
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 208
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 209
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 210
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 211
 testRunner.Then("the exit code should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 212
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out"});
            table7.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        ""});
            table7.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table7.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        ""});
            table7.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table7.AddRow(new string[] {
                        "testFailed",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "System.Exception",
                        "Foo.Tests.UnitTests1.FailedSetUp()",
                        ""});
            table7.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table7.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table7.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table7.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
#line 213
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table7, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run it for failed one time setup")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunItForFailedOneTimeSetup(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run it for failed one time setup", @__tags);
#line 231
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 232
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 233
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 234
 testRunner.And("I have added failedSetUp method as FailedOneTimeSetUp to the class Foo.Tests.Unit" +
                    "Tests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 235
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 237
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 238
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 239
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 240
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 241
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 242
 testRunner.Then("the exit code should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 243
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out"});
            table8.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "testFailed",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "System.Exception",
                        "Foo.Tests.UnitTests1.FailedOneTimeSetUp()",
                        ""});
            table8.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
#line 244
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run it for failed tear down")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunItForFailedTearDown(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run it for failed tear down", @__tags);
#line 262
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 263
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 264
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 265
 testRunner.And("I have added failedTearDown method as FailedTearDown to the class Foo.Tests.UnitT" +
                    "ests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 266
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 267
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 268
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 269
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 270
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 271
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 272
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 273
 testRunner.Then("the exit code should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 274
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table9.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "testFailed",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "System.Exception",
                        "Foo.Tests.UnitTests1.FailedTearDown()",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output",
                        "tc:parseServiceMessagesInside"});
            table9.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 275
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run it for failed ctor")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunItForFailedCtor(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run it for failed ctor", @__tags);
#line 294
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 295
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 296
 testRunner.And("I have added throwException method as ThrowException to the Ctor of class Foo.Tes" +
                    "ts.UnitTests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 297
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 298
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 299
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 300
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 301
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 302
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 303
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 304
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 305
 testRunner.Then("the exit code should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 306
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out"});
            table10.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "testFailed",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "System.Exception : Exception",
                        "at Foo\\.Tests\\.UnitTests1\\.ThrowException\\(\\).+at Foo\\.Tests\\.UnitTests1\\.\\.ctor\\" +
                            "(\\)",
                        ""});
            table10.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
#line 307
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table10, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run it for failed ctor for NUnit2")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunItForFailedCtorForNUnit2(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run it for failed ctor for NUnit2", @__tags);
#line 323
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 324
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 325
 testRunner.And("I have added throwException method as ThrowException to the Ctor of class Foo.Tes" +
                    "ts.UnitTests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 326
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 327
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 328
 testRunner.And("I have copied the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to" +
                    " folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 329
 testRunner.And("I have added the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to " +
                    "foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 330
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 331
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 332
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 333
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 334
 testRunner.Then("the exit code should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 335
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out"});
            table11.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "testFailed",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "SetUp \\: System.Exception \\: Exception",
                        "at Foo.Tests.UnitTests1.ThrowException().*at Foo\\.Tests\\.UnitTests1\\.\\.ctor()",
                        ""});
            table11.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
#line 336
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table11, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run it for parallelizable tests")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunItForParallelizableTests(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run it for parallelizable tests", @__tags);
#line 350
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 351
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 352
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable1 to the " +
                    "class Foo.Tests.UnitTests1 for foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 353
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable2 to the " +
                    "class Foo.Tests.UnitTests1 for foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 354
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable3 to the " +
                    "class Foo.Tests.UnitTests1 for foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 355
 testRunner.And("I have added attribute [assembly: NUnit.Framework.Parallelizable] to the assembly" +
                    " foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 356
 testRunner.And("I have added attribute [NUnit.Framework.Parallelizable] to the class Foo.Tests.Un" +
                    "itTests1 for foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 357
 testRunner.And("I have added NUnit framework references to foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 358
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable4 to the " +
                    "class Foo.Tests.UnitTests1 for foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 359
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable5 to the " +
                    "class Foo.Tests.UnitTests1 for foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 360
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable6 to the " +
                    "class Foo.Tests.UnitTests1 for foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 361
 testRunner.And("I have added attribute [assembly: NUnit.Framework.Parallelizable] to the assembly" +
                    " foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 362
 testRunner.And("I have added attribute [NUnit.Framework.Parallelizable] to the class Foo.Tests.Un" +
                    "itTests1 for foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 363
 testRunner.And("I have added NUnit framework references to foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 364
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 365
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 366
 testRunner.And("I have compiled the assembly foo1.tests to file mocks\\foo1.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 367
 testRunner.And("I have compiled the assembly foo2.tests to file mocks\\foo2.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 368
 testRunner.And("I have added the assembly mocks\\foo1.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 369
 testRunner.And("I have added the assembly mocks\\foo2.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 370
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 371
 testRunner.And("I have added the arg workers=10 to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 372
 testRunner.And("I have added the arg agents=10 to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 373
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 374
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "field",
                        "value"});
            table12.AddRow(new string[] {
                        "Test Count",
                        "6"});
            table12.AddRow(new string[] {
                        "Passed",
                        "6"});
            table12.AddRow(new string[] {
                        "Failed",
                        "0"});
            table12.AddRow(new string[] {
                        "Inconclusive",
                        "0"});
            table12.AddRow(new string[] {
                        "Skipped",
                        "0"});
#line 375
 testRunner.And("the Test Run Summary should has following:", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run successful tests with the same" +
            " names in the several assemblies")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunSuccessfulTestsWithTheSameNamesInTheSeveralAssemblies(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run successful tests with the same" +
                    " names in the several assemblies", @__tags);
#line 389
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 390
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 391
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 392
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 393
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 394
 testRunner.And("I have added NUnit framework references to foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 395
 testRunner.And("I have added NUnit framework references to foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 396
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 397
 testRunner.And("I have compiled the assembly foo1.tests to file mocks\\foo1.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 398
 testRunner.And("I have compiled the assembly foo2.tests to file mocks\\foo2.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 399
 testRunner.And("I have added the assembly mocks\\foo1.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 400
 testRunner.And("I have added the assembly mocks\\foo2.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 401
 testRunner.And("I have added the arg workers=1 to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 402
 testRunner.And("I have added the arg agents=1 to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 403
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 404
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 405
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 406
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table13.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo1.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output",
                        "tc:parseServiceMessagesInside"});
            table13.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo1.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo2.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output",
                        ""});
            table13.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo2.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 407
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table13, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run many test")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunManyTest(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run many test", @__tags);
#line 434
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 435
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 436
 testRunner.And("I have added 1000 successful methods as SuccessfulTest to the class Foo.Tests.Uni" +
                    "tTests1 for foo.tests1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 437
 testRunner.And("I have added 1000 successful methods as SuccessfulTest to the class Foo.Tests.Uni" +
                    "tTests2 for foo.tests2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 438
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 439
 testRunner.And("I have added NUnit framework references to foo.tests1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 440
 testRunner.And("I have added NUnit framework references to foo.tests2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 441
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 442
 testRunner.And("I have compiled the assembly foo.tests1 to file mocks\\foo.tests1.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 443
 testRunner.And("I have compiled the assembly foo.tests2 to file mocks\\foo.tests2.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 444
 testRunner.And("I have added the assembly mocks\\foo.tests1.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 445
 testRunner.And("I have added the assembly mocks\\foo.tests2.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 446
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 447
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 448
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 449
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run many test for several assembli" +
            "es for NUnit2")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("dev")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "None", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "None", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "None", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "None", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Single", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Multiple", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "None", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "None", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "None", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Single", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Multiple", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "1", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunManyTestForSeveralAssembliesForNUnit2(string frameworkVersion, string process, string domain, string agents, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "dev",
                    "teamcity",
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run many test for several assembli" +
                    "es for NUnit2", @__tags);
#line 458
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 459
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 460
 testRunner.And("I have added 100 successful methods as SuccessfulTest to the class Foo.Tests.Unit" +
                    "Tests1 for foo.tests1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 461
 testRunner.And("I have added 100 successful methods as SuccessfulTest to the class Foo.Tests.Unit" +
                    "Tests2 for foo.tests2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 462
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 463
 testRunner.And("I have copied the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to" +
                    " folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 464
 testRunner.And("I have added the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to " +
                    "foo.tests1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 465
 testRunner.And("I have added the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to " +
                    "foo.tests2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 466
 testRunner.And("I have compiled the assembly foo.tests1 to file mocks\\foo.tests1.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 467
 testRunner.And("I have compiled the assembly foo.tests2 to file mocks\\foo.tests2.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 468
 testRunner.And("I have added the assembly mocks\\foo.tests1.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 469
 testRunner.And("I have added the assembly mocks\\foo.tests2.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 470
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 471
 testRunner.And("I have added the arg workers=10 to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 472
 testRunner.And(string.Format("I have added the arg agents={0} to NUnit console command line", agents), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 473
 testRunner.And(string.Format("I have added the arg process={0} to NUnit console command line", process), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 474
 testRunner.And(string.Format("I have added the arg domain={0} to NUnit console command line", domain), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 475
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 476
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 477
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages for bunch of test for several assemblies " +
            "for NUnit2")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "None", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "None", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "None", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "None", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Single", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Multiple", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "None", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "None", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "None", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Single", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Multiple", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "1", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesForBunchOfTestForSeveralAssembliesForNUnit2(string frameworkVersion, string process, string domain, string agents, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "ignore",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages for bunch of test for several assemblies " +
                    "for NUnit2", @__tags);
#line 501
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 502
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 503
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 504
 testRunner.And("I have copied the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to" +
                    " folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 505
 testRunner.And("I have created assemblies according to NUnit2 test results ..\\..\\..\\testsData\\NUn" +
                    "it2HugeTestResult.xml", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 506
 testRunner.And("I have added the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to " +
                    "MAP.Common.Test", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 507
 testRunner.And("I have compiled the assembly MAP.Common.Test to file mocks\\MAP.Common.Test.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 508
 testRunner.And("I have added the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to " +
                    "MAP.Web.Test", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 509
 testRunner.And("I have compiled the assembly MAP.Web.Test to file mocks\\MAP.Web.Test.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 510
 testRunner.And("I have added the assembly mocks\\MAP.Common.Test.dll to the list of testing assemb" +
                    "lies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 511
 testRunner.And("I have added the assembly mocks\\MAP.Web.Test.dll to the list of testing assemblie" +
                    "s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 512
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 513
 testRunner.And("I have added the arg workers=10 to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 514
 testRunner.And(string.Format("I have added the arg agents={0} to NUnit console command line", agents), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 515
 testRunner.And(string.Format("I have added the arg process={0} to NUnit console command line", process), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 516
 testRunner.And(string.Format("I have added the arg domain={0} to NUnit console command line", domain), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 517
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 518
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 519
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit show version and extensions when users pass --list-extensions --teamcity ar" +
            "gs")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        public virtual void NUnitShowVersionAndExtensionsWhenUsersPass_List_Extensions_TeamcityArgs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit show version and extensions when users pass --list-extensions --teamcity ar" +
                    "gs", new string[] {
                        "3.4.1",
                        "teamcity"});
#line 542
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 543
 testRunner.Given("I have added the arg ListExtensions to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 544
 testRunner.And("I have added the arg TeamCity to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 545
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 546
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table14.AddRow(new string[] {
                        "\\s*NUnit\\sConsole\\sRunner\\s\\d+\\.\\d+\\.\\d+\\s*"});
            table14.AddRow(new string[] {
                        "\\s*Extension:\\sNUnit.Engine.Drivers.NUnit2FrameworkDriver\\s*"});
            table14.AddRow(new string[] {
                        "\\s*Extension:\\sNUnit.Engine.Listeners.TeamCityEventListener\\s*"});
            table14.AddRow(new string[] {
                        "\\s*Extension:\\sNUnit.Engine.Services.ProjectLoaders.NUnitProjectLoader\\s*"});
#line 547
 testRunner.And("the output should contain lines:", ((string)(null)), table14, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages from SetUp and TearDown")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesFromSetUpAndTearDown(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages from SetUp and TearDown", @__tags);
#line 556
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 557
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 558
 testRunner.And("I have added SetUpWithOutput method as SetUpWithOutput to the class Foo.Tests.Uni" +
                    "tTests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 559
 testRunner.And("I have added Successful method as SuccessfulTest1 to the class Foo.Tests.UnitTest" +
                    "s1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 560
 testRunner.And("I have added Successful method as SuccessfulTest2 to the class Foo.Tests.UnitTest" +
                    "s1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 561
 testRunner.And("I have added TearDownWithOutput method as TearDownWithOutput to the class Foo.Tes" +
                    "ts.UnitTests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 562
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 563
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 564
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 565
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 566
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 567
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 568
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 569
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 570
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table15.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest1",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest1",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "SetUp output|r|noutput|r|nTearDown output",
                        "tc:parseServiceMessagesInside"});
            table15.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest1",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest2",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest2",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "SetUp output|r|noutput|r|nTearDown output",
                        "tc:parseServiceMessagesInside"});
            table15.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest2",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 571
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table15, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run test scenarios for NUnit3")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunTestScenariosForNUnit3(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run test scenarios for NUnit3", @__tags);
#line 594
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 595
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 596
 testRunner.And("I have added TestCasesWithSymbols method as TestCasesWithSymbols to the class Foo" +
                    ".Tests.UnitTests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 597
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 598
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 599
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 600
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 601
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 602
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 603
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 604
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 605
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 606
 testRunner.And("the output should contain 139 TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run test with polish name for NUni" +
            "t3")]
        [NUnit.Framework.CategoryAttribute("3.6.0")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", "utf-8", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "utf-8", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "windows-1250", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "windows-1250", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunTestWithPolishNameForNUnit3(string frameworkVersion, string encoding, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.6.0",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run test with polish name for NUni" +
                    "t3", @__tags);
#line 614
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 615
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 616
 testRunner.And(string.Format("I have specified encoding {0}", encoding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 617
 testRunner.And("I have added successful method as da_się_przefiltrować_produkty_dodatkowe_po_nazw" +
                    "ie to the class Foo.Tests.UnitTests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 618
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 619
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 620
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 621
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 622
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 623
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 624
 testRunner.And(string.Format("I have added the arg Encoding={0} to NUnit console command line", encoding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 625
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 626
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 627
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table16.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.da_się_przefiltrować_produkty_dodatkowe_po_nazwie",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.da_się_przefiltrować_produkty_dodatkowe_po_nazwie",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output",
                        "tc:parseServiceMessagesInside"});
            table16.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.da_się_przefiltrować_produkty_dodatkowe_po_nazwie",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table16.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 628
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table16, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run test with russian output for N" +
            "Unit3")]
        [NUnit.Framework.CategoryAttribute("3.6.0")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", "utf-8", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "utf-8", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "windows-1251", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "windows-1251", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunTestWithRussianOutputForNUnit3(string frameworkVersion, string encoding, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.6.0",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run test with russian output for N" +
                    "Unit3", @__tags);
#line 649
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 650
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 651
 testRunner.And(string.Format("I have specified encoding {0}", encoding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 652
 testRunner.And("I have added RusTest method as RusTest to the class Foo.Tests.UnitTests1 for foo." +
                    "tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 653
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 654
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 655
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 656
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 657
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 658
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 659
 testRunner.And(string.Format("I have added the arg Encoding={0} to NUnit console command line", encoding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 660
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 661
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 662
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table17.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.RusTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.RusTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "привет",
                        "tc:parseServiceMessagesInside"});
            table17.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.RusTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table17.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 663
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table17, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages including stack trace when OneTimeSetUp i" +
            "n SetUpFixture throws exception")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesIncludingStackTraceWhenOneTimeSetUpInSetUpFixtureThrowsException(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages including stack trace when OneTimeSetUp i" +
                    "n SetUpFixture throws exception", @__tags);
#line 682
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 683
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 684
 testRunner.And("I have added successful method as Test1 to the class Foo.Tests.UnitTests1 for foo" +
                    ".tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 685
 testRunner.And("I have added successful method as Test2 to the class Foo.Tests.UnitTests2 for foo" +
                    ".tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 686
 testRunner.And("I have added FailedOneTimeSetUp method as FailedOneTimeSetUp to the class Foo.Tes" +
                    "ts.FailingSetUpFixture for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 687
 testRunner.And("I have added attribute [NUnit.Framework.SetUpFixture] to the class Foo.Tests.Fail" +
                    "ingSetUpFixture for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 688
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 689
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 690
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 691
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 692
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 693
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 694
 testRunner.And("I want to use CmdArguments configuration type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 695
 testRunner.And("I have added the arg process=InProcess to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 696
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 697
 testRunner.Then("the exit code should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 698
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table18.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table18.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table18.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.Test1",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table18.AddRow(new string[] {
                        "testFailed",
                        "Foo.Tests.UnitTests1.Test1",
                        "",
                        "",
                        ".+",
                        "",
                        "System\\.Exception : Exception during one time setup",
                        "at Foo\\.Tests\\.FailingSetUpFixture\\.FailedOneTimeSetUp",
                        "",
                        ""});
            table18.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.Test1",
                        "",
                        "0",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table18.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests2.Test2",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table18.AddRow(new string[] {
                        "testFailed",
                        "Foo.Tests.UnitTests2.Test2",
                        "",
                        "",
                        ".+",
                        "",
                        "System\\.Exception : Exception during one time setup",
                        "at Foo\\.Tests\\.FailingSetUpFixture\\.FailedOneTimeSetUp",
                        "",
                        ""});
            table18.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests2.Test2",
                        "",
                        "0",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table18.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table18.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 699
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table18, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'successful s service messages when OneTimeTearDown in SetUpF" +
            "ixture throws exception")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySuccessfulSServiceMessagesWhenOneTimeTearDownInSetUpFixtureThrowsException(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'successful s service messages when OneTimeTearDown in SetUpF" +
                    "ixture throws exception", @__tags);
#line 717
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 718
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 719
 testRunner.And("I have added successful method as Test1 to the class Foo.Tests.UnitTests1 for foo" +
                    ".tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 720
 testRunner.And("I have added successful method as Test2 to the class Foo.Tests.UnitTests2 for foo" +
                    ".tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 721
 testRunner.And("I have added FailedOneTimeTearDown method as FailedOneTimeTearDown to the class F" +
                    "oo.Tests.FailingSetUpFixture for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 722
 testRunner.And("I have added attribute [NUnit.Framework.SetUpFixture] to the class Foo.Tests.Fail" +
                    "ingSetUpFixture for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 723
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 724
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 725
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 726
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 727
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 728
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 729
 testRunner.And("I want to use CmdArguments configuration type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 730
 testRunner.And("I have added the arg process=InProcess to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 731
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 732
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 733
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table19.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.Test1",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.Test1",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output",
                        "tc:parseServiceMessagesInside"});
            table19.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.Test1",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests2.Test2",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests2.Test2",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output",
                        "tc:parseServiceMessagesInside"});
            table19.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests2.Test2",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table19.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 734
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table19, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages including stack trace when TestFixtureSet" +
            "up in SetUpFixture throws exception for NUnit2")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesIncludingStackTraceWhenTestFixtureSetupInSetUpFixtureThrowsExceptionForNUnit2(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages including stack trace when TestFixtureSet" +
                    "up in SetUpFixture throws exception for NUnit2", @__tags);
#line 756
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 757
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 758
 testRunner.And("I have added successful method as Test1 to the class Foo.Tests.UnitTests1 for foo" +
                    ".tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 759
 testRunner.And("I have added successful method as Test2 to the class Foo.Tests.UnitTests1 for foo" +
                    ".tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 760
 testRunner.And("I have added FailedTestFixtureSetup method as FailedTestFixtureSetup to the class" +
                    " Foo.Tests.UnitTests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 761
 testRunner.And("I have added attribute [NUnit.Framework.TestFixture] to the class Foo.Tests.UnitT" +
                    "ests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 762
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 763
 testRunner.And("I have copied the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to" +
                    " folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 764
 testRunner.And("I have added the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to " +
                    "foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 765
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 766
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 767
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 768
 testRunner.And("I want to use CmdArguments configuration type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 769
 testRunner.And("I have added the arg process=InProcess to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 770
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 771
 testRunner.Then("the exit code should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 772
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table20.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.Test1",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "testFailed",
                        "Foo.Tests.UnitTests1.Test1",
                        "",
                        "",
                        ".+",
                        "",
                        "System\\.Exception : Exception during TestFixtureSetup",
                        "at Foo\\.Tests\\.UnitTests1\\.FailedTestFixtureSetup",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.Test1",
                        "",
                        "0",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.Test2",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "testFailed",
                        "Foo.Tests.UnitTests1.Test2",
                        "",
                        "",
                        ".+",
                        "",
                        "System\\.Exception : Exception during TestFixtureSetup",
                        "at Foo\\.Tests\\.UnitTests1\\.FailedTestFixtureSetup",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.Test2",
                        "",
                        "0",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table20.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 773
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table20, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'successful s service messages when FailedTestFixtureTearDown" +
            " in SetUpFixture throws exception for NUnit2")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySuccessfulSServiceMessagesWhenFailedTestFixtureTearDownInSetUpFixtureThrowsExceptionForNUnit2(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'successful s service messages when FailedTestFixtureTearDown" +
                    " in SetUpFixture throws exception for NUnit2", @__tags);
#line 790
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 791
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 792
 testRunner.And("I have added successful method as Test1 to the class Foo.Tests.UnitTests1 for foo" +
                    ".tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 793
 testRunner.And("I have added successful method as Test2 to the class Foo.Tests.UnitTests2 for foo" +
                    ".tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 794
 testRunner.And("I have added FailedTestFixtureTearDown method as FailedTestFixtureTearDown to the" +
                    " class Foo.Tests.UnitTests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 795
 testRunner.And("I have added attribute [NUnit.Framework.TestFixture] to the class Foo.Tests.UnitT" +
                    "ests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 796
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 797
 testRunner.And("I have copied the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to" +
                    " folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 798
 testRunner.And("I have added the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to " +
                    "foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 799
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 800
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 801
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 802
 testRunner.And("I want to use CmdArguments configuration type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 803
 testRunner.And("I have added the arg process=InProcess to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 804
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 805
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 806
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table21.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.Test1",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.Test1",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output",
                        "tc:parseServiceMessagesInside"});
            table21.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.Test1",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests2.Test2",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests2.Test2",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output",
                        "tc:parseServiceMessagesInside"});
            table21.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests2.Test2",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table21.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 807
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table21, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run it for one time setup with out" +
            "put")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunItForOneTimeSetupWithOutput(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run it for one time setup with out" +
                    "put", @__tags);
#line 825
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 826
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 827
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 828
 testRunner.And("I have added OneTimeSetUpWithOutput method as OneTimeSetUpWithOutput to the class" +
                    " Foo.Tests.UnitTests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 829
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 830
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 831
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 832
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 833
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 834
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 835
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 836
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 837
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out"});
            table22.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        ""});
            table22.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table22.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        ""});
            table22.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table22.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output"});
            table22.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table22.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table22.AddRow(new string[] {
                        "message",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "OneTimeSetUp output",
                        "",
                        ""});
            table22.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table22.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
#line 838
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table22, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run it for one time TearDown with " +
            "output")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunItForOneTimeTearDownWithOutput(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run it for one time TearDown with " +
                    "output", @__tags);
#line 858
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 859
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 860
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 861
 testRunner.And("I have added OneTimeTearDownWithOutput method as OneTimeTearDownWithOutput to the" +
                    " class Foo.Tests.UnitTests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 862
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 863
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 864
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 865
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 866
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 867
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 868
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 869
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 870
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out"});
            table23.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        ""});
            table23.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table23.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        ""});
            table23.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table23.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output"});
            table23.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table23.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table23.AddRow(new string[] {
                        "message",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "OneTimeTearDown output",
                        "",
                        ""});
            table23.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table23.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
#line 871
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table23, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages with output when TestFixtureSetup in SetU" +
            "pFixture")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWithOutputWhenTestFixtureSetupInSetUpFixture(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages with output when TestFixtureSetup in SetU" +
                    "pFixture", @__tags);
#line 889
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 890
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 891
 testRunner.And("I have added successful method as Test1 to the class Foo.Tests.UnitTests1 for foo" +
                    ".tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 892
 testRunner.And("I have added successful method as Test2 to the class Foo.Tests.UnitTests1 for foo" +
                    ".tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 893
 testRunner.And("I have added TestFixtureSetupWithOutput method as TestFixtureSetupWithOutput to t" +
                    "he class Foo.Tests.UnitTests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 894
 testRunner.And("I have added attribute [NUnit.Framework.TestFixture] to the class Foo.Tests.UnitT" +
                    "ests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 895
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 896
 testRunner.And("I have copied the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to" +
                    " folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 897
 testRunner.And("I have added the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to " +
                    "foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 898
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 899
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 900
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 901
 testRunner.And("I want to use CmdArguments configuration type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 902
 testRunner.And("I have added the arg process=InProcess to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 903
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 904
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 905
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table24.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.Test1",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.Test1",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "TestFixtureSetup output.+output",
                        ""});
            table24.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.Test1",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.Test2",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.Test2",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output",
                        ""});
            table24.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.Test2",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table24.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 906
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table24, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages with output when TestFixtureTearDown in S" +
            "etUpFixture")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWithOutputWhenTestFixtureTearDownInSetUpFixture(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages with output when TestFixtureTearDown in S" +
                    "etUpFixture", @__tags);
#line 922
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 923
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 924
 testRunner.And("I have added successful method as Test1 to the class Foo.Tests.UnitTests1 for foo" +
                    ".tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 925
 testRunner.And("I have added successful method as Test2 to the class Foo.Tests.UnitTests1 for foo" +
                    ".tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 926
 testRunner.And("I have added TestFixtureTearDownWithOutput method as TestFixtureTearDownWithOutpu" +
                    "t to the class Foo.Tests.UnitTests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 927
 testRunner.And("I have added attribute [NUnit.Framework.TestFixture] to the class Foo.Tests.UnitT" +
                    "ests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 928
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 929
 testRunner.And("I have copied the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to" +
                    " folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 930
 testRunner.And("I have added the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to " +
                    "foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 931
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 932
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 933
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 934
 testRunner.And("I want to use CmdArguments configuration type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 935
 testRunner.And("I have added the arg process=InProcess to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 936
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 937
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 938
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table25.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table25.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.Test1",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table25.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.Test1",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output",
                        ""});
            table25.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.Test1",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table25.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.Test2",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table25.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.Test2",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output",
                        ""});
            table25.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.Test2",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table25.AddRow(new string[] {
                        "message",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "TestFixtureTearDown output",
                        "",
                        "",
                        ""});
            table25.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 939
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table25, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
