// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace nunit.integration.tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("NUnit should support TeamCity")]
    public partial class NUnitShouldSupportTeamCityFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TeamCity.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NUnit should support TeamCity", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("NUnit path is ..\\nunit\\", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run successful test for NUnit3")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunSuccessfulTestForNUnit3(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run successful test for NUnit3", @__tags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 9
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 19
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table1.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output",
                        "tc:parseServiceMessagesInside"});
            table1.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table1.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 20
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table1, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run test with Assert.Pass")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunTestWithAssert_Pass(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run test with Assert.Pass", @__tags);
#line 36
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 37
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
 testRunner.And("I have added Pass method as PassTest to the class Foo.Tests.UnitTests1 for foo.te" +
                    "sts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 47
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table2.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.PassTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.PassTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 48
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run test with Assert.Pass with tex" +
            "t")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunTestWithAssert_PassWithText(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run test with Assert.Pass with tex" +
                    "t", @__tags);
#line 64
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 65
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 66
 testRunner.And("I have added PassWithText method as PassTest to the class Foo.Tests.UnitTests1 fo" +
                    "r foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 74
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 75
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table3.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.PassTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.PassTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "Assert.Pass message: some text",
                        "tc:parseServiceMessagesInside"});
            table3.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.PassTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 76
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run test with Assert.Pass for NUni" +
            "t2")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunTestWithAssert_PassForNUnit2(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run test with Assert.Pass for NUni" +
                    "t2", @__tags);
#line 92
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 93
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 94
 testRunner.And("I have added Pass method as PassTest to the class Foo.Tests.UnitTests1 for foo.te" +
                    "sts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.And("I have copied the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to" +
                    " folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.And("I have added the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to " +
                    "foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 102
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 103
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table4.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table4.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.PassTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table4.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.PassTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table4.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 104
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run test with Assert.Pass with tex" +
            "t for NUnit2")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunTestWithAssert_PassWithTextForNUnit2(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run test with Assert.Pass with tex" +
                    "t for NUnit2", @__tags);
#line 116
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 117
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 118
 testRunner.And("I have added PassWithText method as PassTest to the class Foo.Tests.UnitTests1 fo" +
                    "r foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 120
 testRunner.And("I have copied the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to" +
                    " folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 121
 testRunner.And("I have added the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to " +
                    "foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 126
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 127
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table5.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table5.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.PassTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table5.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.PassTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "Assert.Pass message: some text",
                        "tc:parseServiceMessagesInside"});
            table5.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.PassTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table5.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 128
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run it for different types of test" +
            "s")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("ProjectFile", "Version45", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("ProjectFile", "Version40", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CmdArguments", "Version45", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CmdArguments", "Version40", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("ProjectFile", "Version45", "EnvVariable", new string[0])]
        [NUnit.Framework.TestCaseAttribute("ProjectFile", "Version40", "EnvVariable", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CmdArguments", "Version45", "EnvVariable", new string[0])]
        [NUnit.Framework.TestCaseAttribute("CmdArguments", "Version40", "EnvVariable", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunItForDifferentTypesOfTests(string configurationType, string frameworkVersion, string teamCityIntegration, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run it for different types of test" +
                    "s", @__tags);
#line 141
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 142
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 143
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
 testRunner.And("I have added failed method as FailedTest to the class Foo.Tests.UnitTests2 for fo" +
                    "o.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
 testRunner.And("I have added ignored method as IgnoredTest to the class Foo.Tests.UnitTests3 for " +
                    "foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
 testRunner.And("I have added inconclusive method as InconclusiveTest to the class Foo.Tests.UnitT" +
                    "ests4 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
 testRunner.And(string.Format("I want to use {0} type of TeamCity integration", teamCityIntegration), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 153
 testRunner.And(string.Format("I want to use {0} configuration type", configurationType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 155
 testRunner.Then("the exit code should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 156
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table6.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output",
                        "tc:parseServiceMessagesInside"});
            table6.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests2.FailedTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testFailed",
                        "Foo.Tests.UnitTests2.FailedTest",
                        "",
                        "",
                        ".+",
                        "",
                        "Reason",
                        "Foo.Tests.UnitTests2.FailedTest()",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests2.FailedTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests3.IgnoredTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testIgnored",
                        "Foo.Tests.UnitTests3.IgnoredTest",
                        "",
                        "",
                        ".+",
                        "",
                        "Reason",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests4.InconclusiveTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testIgnored",
                        "Foo.Tests.UnitTests4.InconclusiveTest",
                        "",
                        "",
                        ".+",
                        "",
                        "Inconclusive",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table6.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 157
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table6, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run it for failed setup")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunItForFailedSetup(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run it for failed setup", @__tags);
#line 192
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 193
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 194
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
 testRunner.And("I have added failedSetUp method as FailedSetUp to the class Foo.Tests.UnitTests1 " +
                    "for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 196
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 197
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 198
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 199
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 201
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 202
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 203
 testRunner.Then("the exit code should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 204
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out"});
            table7.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table7.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        ""});
            table7.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table7.AddRow(new string[] {
                        "testFailed",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "System.Exception",
                        "Foo.Tests.UnitTests1.FailedSetUp()",
                        ""});
            table7.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table7.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table7.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
#line 205
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table7, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run it for failed one time setup")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunItForFailedOneTimeSetup(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run it for failed one time setup", @__tags);
#line 221
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 222
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 223
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 224
 testRunner.And("I have added failedSetUp method as FailedOneTimeSetUp to the class Foo.Tests.Unit" +
                    "Tests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 225
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 226
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 227
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 228
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 229
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 230
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 231
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 232
 testRunner.Then("the exit code should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 233
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out"});
            table8.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "testFailed",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "System.Exception",
                        "Foo.Tests.UnitTests1.FailedOneTimeSetUp()",
                        ""});
            table8.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
#line 234
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run it for failed tear down")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunItForFailedTearDown(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run it for failed tear down", @__tags);
#line 250
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 251
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 252
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 253
 testRunner.And("I have added failedTearDown method as FailedTearDown to the class Foo.Tests.UnitT" +
                    "ests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 254
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 255
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 256
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 257
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 258
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 259
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 260
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 261
 testRunner.Then("the exit code should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 262
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table9.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "testFailed",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "System.Exception",
                        "Foo.Tests.UnitTests1.FailedTearDown()",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output",
                        "tc:parseServiceMessagesInside"});
            table9.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table9.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 263
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run it for failed ctor")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunItForFailedCtor(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run it for failed ctor", @__tags);
#line 280
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 281
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 282
 testRunner.And("I have added throwException method as ThrowException to the Ctor of class Foo.Tes" +
                    "ts.UnitTests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 283
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 284
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 285
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 286
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 287
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 288
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 289
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 290
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 291
 testRunner.Then("the exit code should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 292
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out"});
            table10.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "testFailed",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        ".+ System.Exception : Exception",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table10.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
#line 293
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table10, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run it for failed ctor for NUnit2")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunItForFailedCtorForNUnit2(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run it for failed ctor for NUnit2", @__tags);
#line 309
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 310
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 311
 testRunner.And("I have added throwException method as ThrowException to the Ctor of class Foo.Tes" +
                    "ts.UnitTests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 312
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 313
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 314
 testRunner.And("I have copied the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to" +
                    " folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 315
 testRunner.And("I have added the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to " +
                    "foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 316
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 317
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 318
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 319
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 320
 testRunner.Then("the exit code should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 321
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out"});
            table11.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "testFailed",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "TestFixtureSetUp failed in UnitTests1",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table11.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
#line 322
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table11, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run it for parallelizable tests")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunItForParallelizableTests(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run it for parallelizable tests", @__tags);
#line 336
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 337
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 338
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable1 to the " +
                    "class Foo.Tests.UnitTests1 for foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 339
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable2 to the " +
                    "class Foo.Tests.UnitTests1 for foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 340
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable3 to the " +
                    "class Foo.Tests.UnitTests1 for foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 341
 testRunner.And("I have added attribute [assembly: NUnit.Framework.Parallelizable] to the assembly" +
                    " foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 342
 testRunner.And("I have added attribute [NUnit.Framework.Parallelizable] to the class Foo.Tests.Un" +
                    "itTests1 for foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 343
 testRunner.And("I have added NUnit framework references to foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 344
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable4 to the " +
                    "class Foo.Tests.UnitTests1 for foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 345
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable5 to the " +
                    "class Foo.Tests.UnitTests1 for foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 346
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable6 to the " +
                    "class Foo.Tests.UnitTests1 for foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 347
 testRunner.And("I have added attribute [assembly: NUnit.Framework.Parallelizable] to the assembly" +
                    " foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 348
 testRunner.And("I have added attribute [NUnit.Framework.Parallelizable] to the class Foo.Tests.Un" +
                    "itTests1 for foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 349
 testRunner.And("I have added NUnit framework references to foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 350
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 351
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 352
 testRunner.And("I have compiled the assembly foo1.tests to file mocks\\foo1.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 353
 testRunner.And("I have compiled the assembly foo2.tests to file mocks\\foo2.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 354
 testRunner.And("I have added the assembly mocks\\foo1.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 355
 testRunner.And("I have added the assembly mocks\\foo2.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 356
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 357
 testRunner.And("I have added the arg workers=10 to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 358
 testRunner.And("I have added the arg agents=10 to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 359
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 360
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "field",
                        "value"});
            table12.AddRow(new string[] {
                        "Test Count",
                        "6"});
            table12.AddRow(new string[] {
                        "Passed",
                        "6"});
            table12.AddRow(new string[] {
                        "Failed",
                        "0"});
            table12.AddRow(new string[] {
                        "Inconclusive",
                        "0"});
            table12.AddRow(new string[] {
                        "Skipped",
                        "0"});
#line 361
 testRunner.And("the Test Run Summary should has following:", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run successful tests with the same" +
            " names in the several assemblies")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunSuccessfulTestsWithTheSameNamesInTheSeveralAssemblies(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run successful tests with the same" +
                    " names in the several assemblies", @__tags);
#line 375
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 376
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 377
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 378
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 379
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 380
 testRunner.And("I have added NUnit framework references to foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 381
 testRunner.And("I have added NUnit framework references to foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 382
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 383
 testRunner.And("I have compiled the assembly foo1.tests to file mocks\\foo1.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 384
 testRunner.And("I have compiled the assembly foo2.tests to file mocks\\foo2.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 385
 testRunner.And("I have added the assembly mocks\\foo1.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 386
 testRunner.And("I have added the assembly mocks\\foo2.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 387
 testRunner.And("I have added the arg workers=1 to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 388
 testRunner.And("I have added the arg agents=1 to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 389
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 390
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 391
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 392
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table13.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo1.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output",
                        "tc:parseServiceMessagesInside"});
            table13.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo1.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo2.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output",
                        ""});
            table13.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table13.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo2.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 393
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table13, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run many test")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunManyTest(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run many test", @__tags);
#line 416
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 417
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 418
 testRunner.And("I have added 1000 successful methods as SuccessfulTest to the class Foo.Tests.Uni" +
                    "tTests1 for foo.tests1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 419
 testRunner.And("I have added 1000 successful methods as SuccessfulTest to the class Foo.Tests.Uni" +
                    "tTests2 for foo.tests2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 420
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 421
 testRunner.And("I have added NUnit framework references to foo.tests1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 422
 testRunner.And("I have added NUnit framework references to foo.tests2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 423
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 424
 testRunner.And("I have compiled the assembly foo.tests1 to file mocks\\foo.tests1.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 425
 testRunner.And("I have compiled the assembly foo.tests2 to file mocks\\foo.tests2.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 426
 testRunner.And("I have added the assembly mocks\\foo.tests1.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 427
 testRunner.And("I have added the assembly mocks\\foo.tests2.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 428
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 429
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 430
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 431
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages when I run many test for several assembli" +
            "es for NUnit2")]
        [NUnit.Framework.CategoryAttribute("dev")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "None", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "None", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "None", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "None", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Single", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Multiple", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "None", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "None", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "None", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Single", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Multiple", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "1", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesWhenIRunManyTestForSeveralAssembliesForNUnit2(string frameworkVersion, string process, string domain, string agents, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "dev",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages when I run many test for several assembli" +
                    "es for NUnit2", @__tags);
#line 439
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 440
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 441
 testRunner.And("I have added 100 successful methods as SuccessfulTest to the class Foo.Tests.Unit" +
                    "Tests1 for foo.tests1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 442
 testRunner.And("I have added 100 successful methods as SuccessfulTest to the class Foo.Tests.Unit" +
                    "Tests2 for foo.tests2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 443
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 444
 testRunner.And("I have copied the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to" +
                    " folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 445
 testRunner.And("I have added the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to " +
                    "foo.tests1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 446
 testRunner.And("I have added the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to " +
                    "foo.tests2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 447
 testRunner.And("I have compiled the assembly foo.tests1 to file mocks\\foo.tests1.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 448
 testRunner.And("I have compiled the assembly foo.tests2 to file mocks\\foo.tests2.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 449
 testRunner.And("I have added the assembly mocks\\foo.tests1.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 450
 testRunner.And("I have added the assembly mocks\\foo.tests2.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 451
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 452
 testRunner.And("I have added the arg workers=10 to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 453
 testRunner.And(string.Format("I have added the arg agents={0} to NUnit console command line", agents), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 454
 testRunner.And(string.Format("I have added the arg process={0} to NUnit console command line", process), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 455
 testRunner.And(string.Format("I have added the arg domain={0} to NUnit console command line", domain), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 456
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 457
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 458
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages for bunch of test for several assemblies " +
            "for NUnit2")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "None", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "None", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "None", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "None", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Single", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Multiple", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "10", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "None", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "None", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "None", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Single", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Multiple", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "1", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesForBunchOfTestForSeveralAssembliesForNUnit2(string frameworkVersion, string process, string domain, string agents, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity",
                    "Ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages for bunch of test for several assemblies " +
                    "for NUnit2", @__tags);
#line 482
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 483
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 484
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 485
 testRunner.And("I have copied the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to" +
                    " folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 486
 testRunner.And("I have created assemblies according to NUnit2 test results ..\\..\\..\\testsData\\NUn" +
                    "it2HugeTestResult.xml", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 487
 testRunner.And("I have added the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to " +
                    "MAP.Common.Test", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 488
 testRunner.And("I have compiled the assembly MAP.Common.Test to file mocks\\MAP.Common.Test.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 489
 testRunner.And("I have added the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to " +
                    "MAP.Web.Test", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 490
 testRunner.And("I have compiled the assembly MAP.Web.Test to file mocks\\MAP.Web.Test.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 491
 testRunner.And("I have added the assembly mocks\\MAP.Common.Test.dll to the list of testing assemb" +
                    "lies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 492
 testRunner.And("I have added the assembly mocks\\MAP.Web.Test.dll to the list of testing assemblie" +
                    "s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 493
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 494
 testRunner.And("I have added the arg workers=10 to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 495
 testRunner.And(string.Format("I have added the arg agents={0} to NUnit console command line", agents), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 496
 testRunner.And(string.Format("I have added the arg process={0} to NUnit console command line", process), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 497
 testRunner.And(string.Format("I have added the arg domain={0} to NUnit console command line", domain), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 498
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 499
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 500
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit show version and extensions when users pass --list-extensions --teamcity ar" +
            "gs")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        public virtual void NUnitShowVersionAndExtensionsWhenUsersPass_List_Extensions_TeamcityArgs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit show version and extensions when users pass --list-extensions --teamcity ar" +
                    "gs", new string[] {
                        "3.4.1",
                        "teamcity"});
#line 523
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 524
 testRunner.Given("I have added the arg ListExtensions to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 525
 testRunner.And("I have added the arg TeamCity to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 526
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 527
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table14.AddRow(new string[] {
                        "\\s*NUnit\\sConsole\\sRunner\\s\\d+\\.\\d+\\.\\d+\\s*"});
            table14.AddRow(new string[] {
                        "\\s*Extension:\\sNUnit.Engine.Drivers.NUnit2FrameworkDriver\\s*"});
            table14.AddRow(new string[] {
                        "\\s*Extension:\\sNUnit.Engine.Listeners.TeamCityEventListener\\s*"});
            table14.AddRow(new string[] {
                        "\\s*Extension:\\sNUnit.Engine.Services.ProjectLoaders.NUnitProjectLoader\\s*"});
#line 528
 testRunner.And("the output should contain lines:", ((string)(null)), table14, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnit sends TeamCity\'s service messages from SetUp and TearDown")]
        [NUnit.Framework.CategoryAttribute("3.4.1")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", new string[0])]
        public virtual void NUnitSendsTeamCitySServiceMessagesFromSetUpAndTearDown(string frameworkVersion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "3.4.1",
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnit sends TeamCity\'s service messages from SetUp and TearDown", @__tags);
#line 537
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 538
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 539
 testRunner.And("I have added SetUpWithOutput method as SetUpWithOutput to the class Foo.Tests.Uni" +
                    "tTests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 540
 testRunner.And("I have added Successful method as SuccessfulTest1 to the class Foo.Tests.UnitTest" +
                    "s1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 541
 testRunner.And("I have added Successful method as SuccessfulTest2 to the class Foo.Tests.UnitTest" +
                    "s1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 542
 testRunner.And("I have added TearDownWithOutput method as TearDownWithOutput to the class Foo.Tes" +
                    "ts.UnitTests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 543
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 544
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 545
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 546
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 547
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 548
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 549
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 550
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 551
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table15.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest1",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest1",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "SetUp output|r|noutput|r|nTearDown output",
                        "tc:parseServiceMessagesInside"});
            table15.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest1",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest2",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest2",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "SetUp output|r|noutput|r|nTearDown output",
                        "tc:parseServiceMessagesInside"});
            table15.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest2",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table15.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 552
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table15, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
