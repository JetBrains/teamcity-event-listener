// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace nunit.integration.tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("User runs tests")]
    public partial class UserRunsTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RunTests.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "User runs tests", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("NUnit path is ..\\nunit\\", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User runs tests for several assemblies")]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "Single", "2", "AnyCpu", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "2", "AnyCpu", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Single", "2", "AnyCpu", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "2", "AnyCpu", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Multiple", "Single", "2", "AnyCpu", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Multiple", "2", "AnyCpu", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "Multiple", "2", "AnyCpu", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "2", "AnyCpu", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Multiple", "2", "AnyCpu", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Single", "1", "AnyCpu", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "Single", "1", "AnyCpu", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "1", "AnyCpu", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Single", "1", "AnyCpu", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "1", "AnyCpu", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Multiple", "Single", "1", "AnyCpu", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Multiple", "1", "AnyCpu", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "Multiple", "1", "AnyCpu", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "1", "AnyCpu", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Multiple", "1", "AnyCpu", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "10", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Single", "10", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "10", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Multiple", "Single", "10", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "10", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Multiple", "10", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "1", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Single", "1", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "1", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Multiple", "Single", "1", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "1", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Multiple", "1", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "Single", "2", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "2", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Single", "2", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "2", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Multiple", "Single", "2", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Multiple", "2", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "Multiple", "2", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "2", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Multiple", "2", "X86", "ProjectFile", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "Single", "2", "AnyCpu", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "2", "AnyCpu", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Single", "2", "AnyCpu", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "2", "AnyCpu", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Multiple", "Single", "2", "AnyCpu", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Multiple", "2", "AnyCpu", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "Multiple", "2", "AnyCpu", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "2", "AnyCpu", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Multiple", "2", "AnyCpu", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Single", "1", "AnyCpu", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "Single", "1", "AnyCpu", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "1", "AnyCpu", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Single", "1", "AnyCpu", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "1", "AnyCpu", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Multiple", "Single", "1", "AnyCpu", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Multiple", "1", "AnyCpu", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "Multiple", "1", "AnyCpu", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "1", "AnyCpu", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Multiple", "1", "AnyCpu", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Multiple", "Single", "10", "X86", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "10", "X86", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Multiple", "10", "X86", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "1", "X86", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Single", "1", "X86", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "1", "X86", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Multiple", "Single", "1", "X86", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "1", "X86", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Multiple", "1", "X86", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "Single", "2", "X86", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "2", "X86", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Single", "2", "X86", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "2", "X86", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Multiple", "Single", "2", "X86", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Multiple", "2", "X86", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "Multiple", "2", "X86", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "2", "X86", "CmdArguments", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Multiple", "2", "X86", "CmdArguments", new string[0])]
        public virtual void UserRunsTestsForSeveralAssemblies(string frameworkVersion, string process, string domain, string agents, string platform, string configurationType, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User runs tests for several assemblies", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 7
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo1.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("I have added the assembly mocks\\foo1.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo2.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.And("I have added the assembly mocks\\foo2.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo3.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.And("I have added the assembly mocks\\foo3.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo4.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.And("I have added the assembly mocks\\foo4.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo5.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("I have added the assembly mocks\\foo5.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo6.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.And("I have added the assembly mocks\\foo6.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.And(string.Format("I want to use {0} configuration type", configurationType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.And("I have added the arg workers=10 to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.And(string.Format("I have added the arg agents={0} to NUnit console command line", agents), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And(string.Format("I have added the arg process={0} to NUnit console command line", process), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And(string.Format("I have added the arg domain={0} to NUnit console command line", domain), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "field",
                        "value"});
            table1.AddRow(new string[] {
                        "Test Count",
                        "6"});
            table1.AddRow(new string[] {
                        "Passed",
                        "6"});
            table1.AddRow(new string[] {
                        "Failed",
                        "0"});
            table1.AddRow(new string[] {
                        "Inconclusive",
                        "0"});
            table1.AddRow(new string[] {
                        "Skipped",
                        "0"});
#line 40
 testRunner.And("the Test Run Summary should has following:", ((string)(null)), table1, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User runs parallelizable tests")]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Single", "10", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "Single", "10", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "10", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Single", "10", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "10", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Multiple", "Single", "10", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Multiple", "10", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "Multiple", "10", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "10", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Multiple", "10", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Single", "1", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "Single", "1", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "1", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Single", "1", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "1", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Multiple", "Single", "1", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Multiple", "1", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "Multiple", "1", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "1", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Multiple", "1", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "10", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Single", "10", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "10", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Multiple", "Single", "10", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "10", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Multiple", "10", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "1", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Single", "1", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "1", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Multiple", "Single", "1", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "1", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Multiple", "1", "X86", new string[0])]
        public virtual void UserRunsParallelizableTests(string frameworkVersion, string process, string domain, string agents, string platform, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User runs parallelizable tests", exampleTags);
#line 128
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 129
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 130
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable1 to the " +
                    "class Foo.Tests.UnitTests1 for foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable2 to the " +
                    "class Foo.Tests.UnitTests1 for foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable3 to the " +
                    "class Foo.Tests.UnitTests1 for foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 133
 testRunner.And("I have added attribute [assembly: NUnit.Framework.Parallelizable] to the assembly" +
                    " foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
 testRunner.And("I have added attribute [NUnit.Framework.Parallelizable] to the class Foo.Tests.Un" +
                    "itTests1 for foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 135
 testRunner.And("I have added NUnit framework references to foo1.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 136
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable4 to the " +
                    "class Foo.Tests.UnitTests1 for foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 137
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable5 to the " +
                    "class Foo.Tests.UnitTests1 for foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
 testRunner.And("I have added SuccessfulParallelizable method as SuccessfulParallelizable6 to the " +
                    "class Foo.Tests.UnitTests1 for foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 139
 testRunner.And("I have added attribute [assembly: NUnit.Framework.Parallelizable] to the assembly" +
                    " foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
 testRunner.And("I have added attribute [NUnit.Framework.Parallelizable] to the class Foo.Tests.Un" +
                    "itTests1 for foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
 testRunner.And("I have added NUnit framework references to foo2.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 143
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
 testRunner.And(string.Format("I have specified {0} platform for assembly foo1.tests", platform), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
 testRunner.And("I have compiled the assembly foo1.tests to file mocks\\foo1.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
 testRunner.And(string.Format("I have specified {0} platform for assembly foo2.tests", platform), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
 testRunner.And("I have compiled the assembly foo2.tests to file mocks\\foo2.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
 testRunner.And("I have added the assembly mocks\\foo1.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
 testRunner.And("I have added the assembly mocks\\foo2.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
 testRunner.And("I have added the arg workers=10 to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
 testRunner.And(string.Format("I have added the arg agents={0} to NUnit console command line", agents), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 153
 testRunner.And(string.Format("I have added the arg process={0} to NUnit console command line", process), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
 testRunner.And(string.Format("I have added the arg domain={0} to NUnit console command line", domain), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 155
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 156
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 157
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "field",
                        "value"});
            table2.AddRow(new string[] {
                        "Test Count",
                        "6"});
            table2.AddRow(new string[] {
                        "Passed",
                        "6"});
            table2.AddRow(new string[] {
                        "Failed",
                        "0"});
            table2.AddRow(new string[] {
                        "Inconclusive",
                        "0"});
            table2.AddRow(new string[] {
                        "Skipped",
                        "0"});
#line 158
 testRunner.And("the Test Run Summary should has following:", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User runs parallelizable tests for NUnit 2 framework")]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Single", "10", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "Single", "10", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "10", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Single", "10", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "10", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Multiple", "Single", "10", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Multiple", "10", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "Multiple", "10", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "10", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Multiple", "10", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Single", "1", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "Single", "1", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "1", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Single", "1", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "1", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Multiple", "Single", "1", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "InProcess", "Multiple", "1", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "InProcess", "Multiple", "1", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "1", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Multiple", "1", "AnyCpu", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "10", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Single", "10", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "10", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Multiple", "Single", "10", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "10", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Multiple", "10", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Single", "1", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Single", "1", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Multiple", "Single", "1", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Multiple", "Single", "1", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version45", "Separate", "Multiple", "1", "X86", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Version40", "Separate", "Multiple", "1", "X86", new string[0])]
        public virtual void UserRunsParallelizableTestsForNUnit2Framework(string frameworkVersion, string process, string domain, string agents, string platform, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User runs parallelizable tests for NUnit 2 framework", exampleTags);
#line 209
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 210
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
 testRunner.And("I have added successfulCatA method as SuccessfulTestCatA to the class Foo.Tests.U" +
                    "nitTests1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 212
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 213
 testRunner.And("I have added the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to " +
                    "foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
 testRunner.And("I have copied the reference ..\\..\\packages\\NUnit.2.6.4\\lib\\nunit.framework.dll to" +
                    " folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
 testRunner.And(string.Format("I have specified {0} platform for assembly foo.tests", platform), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.dll", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 217
 testRunner.And("I have added the assembly mocks\\foo.tests.dll to the list of testing assemblies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 218
 testRunner.And("I have added the arg Where=cat!=CatA to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 219
 testRunner.And("I want to use CmdArguments type of TeamCity integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 220
 testRunner.And("I have added the arg workers=10 to NUnit console command line", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 221
 testRunner.And(string.Format("I have added the arg agents={0} to NUnit console command line", agents), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 222
 testRunner.And(string.Format("I have added the arg process={0} to NUnit console command line", process), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 223
 testRunner.And(string.Format("I have added the arg domain={0} to NUnit console command line", domain), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 224
 testRunner.When("I run NUnit console", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 225
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 226
 testRunner.And("the output should contain correct set of TeamCity service messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "field",
                        "value"});
            table3.AddRow(new string[] {
                        "Test Count",
                        "1"});
            table3.AddRow(new string[] {
                        "Passed",
                        "1"});
            table3.AddRow(new string[] {
                        "Failed",
                        "0"});
            table3.AddRow(new string[] {
                        "Inconclusive",
                        "0"});
            table3.AddRow(new string[] {
                        "Skipped",
                        "0"});
#line 227
 testRunner.And("the Test Run Summary should has following:", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
